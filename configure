#!/bin/sh
BUILDINFO=mlir-hs.buildinfo
echo "-- Autogenerated on $(date)" > ${BUILDINFO}

# extracting infomation (TODO: Maybe remove)
OPTION=$(getopt -o "" -l "with-compiler:,prefix:,bindir:,libdir:,libexecdir:,datadir:,sysconfdir:" -n "configure" -- "$@")
if [ $? -ne 0 ]; then
    echo "configure: failed to parse paramters \"$@\"" >&2
    exit 1
fi

eval set -- "$OPTION"
unset OPTION

while true; do
    case "$1" in
        '--with-compiler')
            # echo "with compiler: $2"
            shift 2
            continue
            ;;
        '--prefix')
            # echo "prefix: $2"
            shift 2
            continue
            ;;
        '--bindir')
            # echo "bindir: $2"
            shift 2
            continue
            ;;
        '--libdir')
            # echo "libdir: $2"
            shift 2
            continue
            ;;
        '--libexecdir')
            # echo "libexecdir: $2"
            shift 2
            continue
            ;;
        '--datadir')
            # echo "datadir: $2"
            shift 2
            continue
            ;;
        '--sysconfdir')
            # echo "sysconfdir: $2"
            shift 2
            continue
            ;;
        '--CC')
            # echo "CC: $2"
            shift 2
            continue
            ;;
        '--')
            shift
            break
            ;;
        *)
            echo "Unrecognized option $1" >&2
            exit 1
            ;;
    esac
done
set --

# echo "include-dirs: $(llvm-config --includedir) " >> ${OUTPUT}
# echo "extra-lib-dirs: $(llvm-config --libdir) " >> ${OUTPUT}

# check for cmake
if [[ ! `command -v cmake` ]]; then
    echo "configure: cmake is required." >&2
    echo "buildable: False" >> ${BUILDINFO}
    exit 1
fi

# embedding the CMakeLists.txt file 
# horrible solution
cat > writer_program.sh <<- EOF
#!/bin/sh
echo "\$2" > \$1
EOF
chmod +x writer_program.sh

LINK_LIST=MLIRCAPIIR
[ ${CABAL_FLAG_enabledialectarith}        -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIArith"
[ ${CABAL_FLAG_enabledialectasync}        -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIAsync"
[ ${CABAL_FLAG_enabledialectcontrolflow}  -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIControlFlow"
[ ${CABAL_FLAG_enabledialectfunc}         -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIFunc"
[ ${CABAL_FLAG_enabledialectgpu}          -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIGPU"
[ ${CABAL_FLAG_enabledialectlinalg}       -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPILinalg"
[ ${CABAL_FLAG_enabledialectllvm}         -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPILLVM"
[ ${CABAL_FLAG_enabledialectmath}         -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIMath"
[ ${CABAL_FLAG_enabledialectmemref}       -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIMemRef"
[ ${CABAL_FLAG_enabledialectmlprogram}    -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIMLProgram"
[ ${CABAL_FLAG_enabledialectpdl}          -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIPDL"
[ ${CABAL_FLAG_enabledialectquant}        -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIQuant"
[ ${CABAL_FLAG_enabledialectscf}          -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPISCF"
[ ${CABAL_FLAG_enabledialectshape}        -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIShape"
[ ${CABAL_FLAG_enabledialectsparsetensor} -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPISparseTensor"
[ ${CABAL_FLAG_enabledialecttensor}       -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPITensor"
[ ${CABAL_FLAG_enabledialecttransform}    -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPITransformDialect"
[ ${CABAL_FLAG_enabledialectvector}       -eq 1 ] && LINK_LIST="${LINK_LIST} MLIRCAPIVector"

echo "List of linked targets: ${LINK_LIST}"

cat > CMakeLists.txt <<- EOF
cmake_minimum_required(VERSION 3.12)
project(CabalTest)

set(CMAKE_ECHO_STANDARD_LIBRARIES \${CMAKE_CXX_STANDARD_LIBRARIES})
set(CMAKE_ECHO_FLAGS \${CMAKE_CXX_FLAGS})
set(CMAKE_ECHO_LINK_FLAGS \${CMAKE_CXX_LINK_FLAGS})
set(CMAKE_ECHO_IMPLICIT_LINK_DIRECTORIES \${CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES})
set(CMAKE_ECHO_LINK_EXECUTABLE "\${WRITER_PROGRAM} <TARGET> \"<LINK_LIBRARIES>\"")

find_package(MLIR REQUIRED CONFIG)

add_executable(Link "dummy")
# TODO: Implement flags
target_link_libraries(Link MLIRCAPIIR
                           MLIRCAPIArith
                           MLIRCAPIAsync
                           MLIRCAPIControlFlow
                           MLIRCAPIFunc
                           MLIRCAPIGPU
                           MLIRCAPILinalg
                           MLIRCAPILLVM
                           MLIRCAPIMath
                           MLIRCAPIMemRef
                           MLIRCAPIMLProgram
                           MLIRCAPIPDL
                           MLIRCAPIQuant
                           MLIRCAPISCF
                           MLIRCAPIShape
                           MLIRCAPISparseTensor
                           MLIRCAPITensor
                           MLIRCAPITransformDialect
                           MLIRCAPIVector
                     )
set_target_properties(Link PROPERTIES LINKER_LANGUAGE ECHO SUFFIX "")
EOF
touch dummy

# cmake is used because there is currently no way of querying mlir libraries otherwise (there is no mlir-config like llvm-config)
mkdir -p cmake
cmake -DWRITER_PROGRAM=`pwd`/writer_program.sh -Bcmake .
if [ $? -ne 0 ]; then
    echo "configure: cmake failed" >&2
    echo "buildable: False" >> ${BUILDINFO}
    exit 1
fi

# finding the correct module to link
if [[ ! `command -v make` ]]; then
    echo "configure: make is required." >&2
    echo "buildable: False" >> ${BUILDINFO}
    exit 1
fi

(cd cmake && make Link)
cat > program.awk <<- EOF
#!/bin/awk
BEGIN {
    RS = " ";
    FS = "/";
    OFS = "/";
}
!/-l/ && NF {
    lname = \$NF;
    gsub(/lib|\.a|\.so/, "", lname);
    libs=libs"\n    "lname;
    --NF;
    \$1 = \$1;
    paths=paths"\n    "\$0;
}
END   {
    print "extra-libraries:"libs;
    print "extra-lib-dirs:"paths;
}
EOF

# TODO: Check $?
if [[ ! `command -v awk` ]]; then
    echo "configure: awk is required." >&2
    echo "buildable: False" >> ${BUILDINFO}
    exit 1
fi
(cd cmake && awk -f ../program.awk Link) >> ${BUILDINFO}

# TODO: Change this for consistency
echo "include-dirs: $(llvm-config --includedir) " >> ${BUILDINFO}
